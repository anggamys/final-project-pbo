/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.final_project_pbo.ui;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadFactory;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamPanel;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.LuminanceSource;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.NotFoundException;
import com.google.zxing.Result;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.HybridBinarizer;
import com.mycompany.final_project_pbo.models.Product;
import com.mycompany.final_project_pbo.models.TransactionType;
import com.mycompany.final_project_pbo.models.User;
import com.mycompany.final_project_pbo.repositories.ProductRepository;
import com.mycompany.final_project_pbo.services.StockTransactionService;
import com.mycompany.final_project_pbo.utils.Response;
import com.mycompany.final_project_pbo.utils.SessionManager;
import com.mycompany.final_project_pbo.utils.TransactionManager;
import java.awt.Frame;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

/**
 *
 * @author zakyp
 */
public class FrameScanBarang extends javax.swing.JFrame implements Runnable, ThreadFactory {
    private WebcamPanel panel = null;
    private Webcam webcam = null;
    private ExecutorService executor = Executors.newSingleThreadExecutor(this);
    private volatile boolean running = true;

    ProductRepository productRepository = new ProductRepository();
    StockTransactionService stokService = new StockTransactionService();
    TransactionType currentTransactionType = TransactionManager.getInstance().getCurrentTransactionType();

    User currentUser = SessionManager.getInstance().getCurrentUser();
    TransactionType transactionType = TransactionManager.getInstance().getCurrentTransactionType();

    /**
     * Creates new form FrameScanBarang
     */
    public FrameScanBarang() {
        initComponents();
        initWebcam();
        initializeComponents();
        
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

    // ADDED: Menambahkan listener untuk menangani tombol close
    this.addWindowListener(new WindowAdapter() {
        @Override
        public void windowClosing(WindowEvent e) {
            // Mencegah jendela menutup dan beralih ke Dashboard
            closeAndSwitchTo(new Dashboard());
        }
    });
    }

    private void initializeComponents() {
        if (transactionType == TransactionType.IN) {
            System.out.println("Current Transaction Type: IN");
            Kategori.setText("Scan Barang Masuk");
        } else if (transactionType == TransactionType.OUT) {
            System.out.println("Current Transaction Type: OUT");
            Kategori.setText("Scan Barang Keluar");
        } else {
            Kategori.setText("Scan Barang");

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        webCamPanel = new javax.swing.JPanel();
        Kategori = new javax.swing.JLabel();
        statusDetection = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1080, 720));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(1080, 720));

        javax.swing.GroupLayout webCamPanelLayout = new javax.swing.GroupLayout(webCamPanel);
        webCamPanel.setLayout(webCamPanelLayout);
        webCamPanelLayout.setHorizontalGroup(
            webCamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 640, Short.MAX_VALUE)
        );
        webCamPanelLayout.setVerticalGroup(
            webCamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 376, Short.MAX_VALUE)
        );

        Kategori.setBackground(new java.awt.Color(255, 255, 255));
        Kategori.setFont(new java.awt.Font("Tw Cen MT", 1, 24)); // NOI18N
        Kategori.setForeground(new java.awt.Color(93, 173, 226));
        Kategori.setText("Scan Barang");

        statusDetection.setText("Barang masuk atau keluar: Nama barang");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(Kategori))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(210, 210, 210)
                        .addComponent(webCamPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(405, 405, 405)
                        .addComponent(statusDetection)))
                .addContainerGap(453, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(Kategori)
                .addGap(31, 31, 31)
                .addComponent(webCamPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(statusDetection)
                .addContainerGap(235, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrameScanBarang.class.getName()).log(java.util.logging.Level.SEVERE,
                    null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrameScanBarang.class.getName()).log(java.util.logging.Level.SEVERE,
                    null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrameScanBarang.class.getName()).log(java.util.logging.Level.SEVERE,
                    null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrameScanBarang.class.getName()).log(java.util.logging.Level.SEVERE,
                    null, ex);
        }
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrameScanBarang().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Kategori;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel statusDetection;
    private javax.swing.JPanel webCamPanel;
    // End of variables declaration//GEN-END:variables

    // --- Modular Main Scanner Thread Logic ---
    @Override
    public void run() {
        while (running) {
            sleep(2000); 
            
            if (!isWebcamReady())
                continue;

            BufferedImage image = getWebcamImage();
            if (image == null)
                continue;

            String barcode = decodeBarcodeFromImage(image);
            if (barcode != null) {
                processBarcode(barcode);
            }
        }
    }

    // --- Barcode Processing ---
    private void processBarcode(String barcode) {
        System.out.println("Barcode detected: " + barcode);
        Response<ArrayList<Product>> response = productRepository.findByBarcode(barcode, null);
        if (!response.isSuccess()) {
            showErrorDialog("Error: " + response.getMessage());
            return;
        }

        ArrayList<Product> products = response.getData();
        if (products == null || products.isEmpty()) {
            int option = JOptionPane.showOptionDialog(this,
                    "Barang tidak ditemukan, apakah ingin menyimpan barcode ini?\n" + barcode,
                    "Peringatan",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE,
                    null, null, null);

            if (option == JOptionPane.YES_OPTION) {
                // Buat produk baru dummy hanya berisi barcode
                Product newProduct = new Product();
                newProduct.setBarcode(barcode);
                newProduct.setName(""); // Kosong, user nanti mengisi
                TransactionManager.getInstance()
                    .setTransaction(TransactionManager.getInstance().getCurrentTransactionType(), newProduct);

                // Setelah selesai, buka kembali frame yang diinginkan dan pastikan frame ini di-close
                SwingUtilities.invokeLater(() -> {
                    closeAndSwitchTo(new Dashboard());
                });
            }
            // Jika NO, maka tidak melakukan apa-apa, scanner tetap lanjut
            return;
        }

        TransactionType type = TransactionManager.getInstance().getCurrentTransactionType();
        String status;
        if (type == TransactionType.IN) {
            Response<Boolean> incrementResponse = stokService.incrementStock(products.get(0).getBarcode(), 1, null);
            if (!incrementResponse.isSuccess()) {
                showErrorDialog("Gagal menambah stok: " + incrementResponse.getMessage());
                return;
            }

            status = "Barang masuk: " + products.get(0).getName();
        } else if (type == TransactionType.OUT) {
            Response<Boolean> decrementResponse = stokService.decrementStock(products.get(0).getBarcode(), 1, null);
            if (!decrementResponse.isSuccess()) {
                showErrorDialog("Gagal mengurangi stok: " + decrementResponse.getMessage());
                return;
            }
            
            status = "Barang keluar: " + products.get(0).getName();
        } else {
            status = "Tidak ada transaksi yang aktif.";
        }

        SwingUtilities.invokeLater(() -> statusDetection.setText(status));

        // Additional logic: update TransactionManager product, etc.
        TransactionManager.getInstance().setTransaction(type, products.get(0));
    }

    // --- Webcam Initialization (Modular) ---
    private void initWebcam() {
        List<Webcam> webcams = Webcam.getWebcams();
        if (webcams.isEmpty()) {
            showErrorDialog("No webcams found!");
            executor.shutdown();
            return;
        }
        printWebcamList(webcams);

        webcam = selectOrFallbackWebcam(webcams, 2);
        if (webcam == null || !webcam.isOpen()) {
            showErrorDialog("Failed to open any webcam!");
            executor.shutdown();
            return;
        }

        setupWebcamPanel(webcam);
        executor.execute(this); // Start scanner thread
    }

    // --- Helper: Choose Webcam or fallback ---
    private Webcam selectOrFallbackWebcam(List<Webcam> webcams, int cameraIndex) {
        Webcam chosen = tryOpenWebcam(webcams, cameraIndex);
        if (chosen == null || !chosen.isOpen()) {
            for (int i = 0; i < webcams.size(); i++) {
                chosen = tryOpenWebcam(webcams, i);
                if (chosen != null && chosen.isOpen()) {
                    System.out.println("Fallback to camera " + i + " " + webcams.get(i).getName());
                    break;
                }
            }
        }
        return chosen;
    }

    private Webcam tryOpenWebcam(List<Webcam> webcams, int index) {
        if (index >= webcams.size())
            return null;
        Webcam cam = webcams.get(index);
        try {
            Dimension[] resolutions = cam.getViewSizes();
            Dimension maxResolution = resolutions[resolutions.length - 1];
            cam.setViewSize(maxResolution);
            cam.open(true);
            return cam;
        } catch (Exception ex) {
            System.out.println("Camera " + index + " failed: " + ex.getMessage());
            return null;
        }
    }

    // --- Helper: GUI and Cleanup ---
    private void showErrorDialog(String message) {
        JOptionPane.showMessageDialog(this, message, "Error", JOptionPane.ERROR_MESSAGE);
    }

    private void setupWebcamPanel(Webcam webcam) {
        panel = new WebcamPanel(webcam);
        panel.setPreferredSize(webcam.getViewSize());
        panel.setFPSDisplayed(true);
        webCamPanel.setLayout(new BorderLayout());
        webCamPanel.add(panel, BorderLayout.CENTER);
    }

    // --- Modular Cleanup Function ---
    private void cleanupResources() {
        running = false;
        if (executor != null && !executor.isShutdown())
            executor.shutdownNow();
        if (webcam != null) {
            if (webcam.isOpen())
                webcam.close();
            webcam = null;
        }
    }

    private void closeAndSwitchTo(JFrame targetFrame) {
        cleanupResources();
        this.dispose();
        
        if (targetFrame != null && !isWindowOpen(Dashboard.class)) {
        targetFrame.setVisible(true);
        }
    }

    
    @Override
    public void dispose() {
        cleanupResources();
        super.dispose();
        Dashboard dashboard = new Dashboard();
        dashboard.setVisible(true);
    }

    // --- Utility Methods ---
    private void sleep(int ms) {
        try {
            Thread.sleep(ms);
        } catch (InterruptedException ex) {
            Thread.currentThread().interrupt();
        }
    }

    private boolean isWebcamReady() {
        return webcam != null && webcam.isOpen();
    }

    private BufferedImage getWebcamImage() {
        return webcam.getImage();
    }

    private String decodeBarcodeFromImage(BufferedImage image) {
        try {
            LuminanceSource source = new BufferedImageLuminanceSource(image);
            BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));
            Result result = new MultiFormatReader().decode(bitmap);
            return result.getText();
        } catch (NotFoundException ex) {
            // No barcode found
            return null;
        }
    }

    private void printWebcamList(List<Webcam> webcams) {
        for (int i = 0; i < webcams.size(); i++) {
            System.out.println("[" + i + "] " + webcams.get(i).getName());
        }
    }

    // Required by ThreadFactory
    @Override
    public Thread newThread(Runnable r) {
        Thread t = new Thread(r, "BarcodeScannerThread");
        t.setDaemon(true);
        return t;
    }

    private boolean isWindowOpen(Class<Dashboard> aClass) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}